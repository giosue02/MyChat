package mychat.tcp.gui;

import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultCaret;
import javax.swing.text.Document;
import javax.swing.text.html.HTMLDocument;
import mychat.tcp.ClientInfo;
import mychat.tcp.login.loginUtenti;
import mychat.tcp.messages.ClientInfoMessage;
import mychat.tcp.messages.ClientInfosMessage;
import mychat.tcp.messages.Message;
import mychat.tcp.messages.MsgMessage;
import mychat.tcp.server.MyChatServer;

/**
 *
 * @author giosu
 */
public class MyChatServerGUI extends javax.swing.JFrame {

    protected MyChatServer server;

    /**
     * Creates new form MyChatServerGUI
     */
    public MyChatServerGUI() {
        initComponents();
        DefaultCaret caret = (DefaultCaret) txtLog.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelPort = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        connectUserList = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        registeredUserList = new javax.swing.JTextArea();
        btnStop = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Server");

        labelPort.setText("Port");

        txtPort.setText("6001");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelPort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPort)
                    .addComponent(txtPort))
                .addContainerGap())
        );

        txtLog.setContentType("text/html"); // NOI18N
        txtLog.setEnabled(false);
        jScrollPane1.setViewportView(txtLog);

        connectUserList.setColumns(20);
        connectUserList.setLineWrap(true);
        connectUserList.setRows(5);
        connectUserList.setText("Online users");
        connectUserList.setEnabled(false);
        connectUserList.setEnabled(false);
        connectUserList.setEditable(false);
        jScrollPane2.setViewportView(connectUserList);

        registeredUserList.setColumns(20);
        registeredUserList.setLineWrap(true);
        registeredUserList.setRows(5);
        registeredUserList.setText("Registered users");
        registeredUserList.setEnabled(false);
        connectUserList.setEnabled(false);
        connectUserList.setEditable(false);
        jScrollPane3.setViewportView(registeredUserList);

        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStop)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnStart)
                            .addComponent(btnStop))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        StartServer();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        StopServer();
    }//GEN-LAST:event_btnStopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyChatServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyChatServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyChatServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyChatServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyChatServerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JTextArea connectUserList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelPort;
    public static javax.swing.JTextArea registeredUserList;
    public static javax.swing.JTextPane txtLog;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables

    public void log(String msg) throws BadLocationException, IOException {
        boolean privato = false;
        String registrati="Registered users: \n";
        String utenti_registrati[] = loginUtenti.RegisteredUsers().split("~");
        for(int i=0; i<utenti_registrati.length;i++){
            String utente_registrato[] = utenti_registrati[i].split("#");
            if(msg.contains(": @"+utente_registrato[1])){
                privato = true;
            }
        }
        if(msg.contains("<span")){
            HTMLDocument log=(HTMLDocument) txtLog.getStyledDocument();
            log.insertAfterEnd(log.getCharacterElement(log.getLength()),msg + "<br>");
        }else if(privato==true){
            HTMLDocument log=(HTMLDocument) txtLog.getStyledDocument();
            log.insertAfterEnd(log.getCharacterElement(log.getLength()),"<span style='color:blue;'>"+msg+"</span><br>");
        }else{
            Document log = this.txtLog.getDocument();
            try {
                log.insertString(log.getLength(), msg + "\n", null);
            } catch (BadLocationException ex) {
                Logger.getLogger(MyChatServerGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void StartServer() {
        connectUserList.setEnabled(true);
        connectUserList.setEditable(false);
        registeredUserList.setEnabled(true);
        registeredUserList.setEditable(false);
        txtLog.setEnabled(true);
        txtLog.setEditable(false);
        this.btnStart.setEnabled(false);
        this.txtPort.setEnabled(false);
        int port = Integer.parseInt(txtPort.getText());
        String registrati="Registered users: \n";
        if(!loginUtenti.utenteIsEmpty()){
            String utenti_registrati[] = loginUtenti.RegisteredUsers().split("~");
            for(int i=0; i<utenti_registrati.length;i++){
                String utente_registrato[] = utenti_registrati[i].split("#");
                registrati+="@"+utente_registrato[1]+"\n";
            }
            registeredUserList.setText(registrati);
        }
       
        
        SwingWorker starting = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                server = new MyChatServer(port) {
                    @Override
                        public void notifyUpdateClients(List<ClientInfo> users) {
                            String connessi="Online users: ";
                            for (ClientInfo c : users) {
                                connessi=connessi + ("\n@" + c.nickname);
                            }
                            connectUserList.setText(connessi);
                        }

                    @Override
                    public void notifyReceiveMsg(ClientInfo c, Message message) {
                        if (message instanceof MsgMessage) {
                            MsgMessage msg = (MsgMessage) message;
                            try {
                                log(msg.client_info.nickname + ": " + msg.msg);
                            } catch (BadLocationException ex) {
                                Logger.getLogger(MyChatServerGUI.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException ex) {
                                Logger.getLogger(MyChatServerGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else if (message instanceof ClientInfoMessage) {
                            ClientInfoMessage msg = (ClientInfoMessage) message;
                            try {
                                log(c.nickname + ": " + msg.info);
                            } catch (BadLocationException ex) {
                                Logger.getLogger(MyChatServerGUI.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException ex) {
                                Logger.getLogger(MyChatServerGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else if (message instanceof ClientInfosMessage) {
                            ClientInfosMessage msg = (ClientInfosMessage) message;
                            try {
                                log(c.nickname + ": " + msg.infos);
                            } catch (BadLocationException ex) {
                                Logger.getLogger(MyChatServerGUI.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException ex) {
                                Logger.getLogger(MyChatServerGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            try {
                                log(c.nickname + ": " + message);
                            } catch (BadLocationException ex) {
                                Logger.getLogger(MyChatServerGUI.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException ex) {
                                Logger.getLogger(MyChatServerGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    }

                    @Override
                    public void notifyException(Exception ex) {
                        try {
                            log("Server exception: " + ex.getMessage());
                        } catch (BadLocationException ex1) {
                            Logger.getLogger(MyChatServerGUI.class.getName()).log(Level.SEVERE, null, ex1);
                        } catch (IOException ex1) {
                            Logger.getLogger(MyChatServerGUI.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                    }

                    @Override
                    public void notifyExceptionFromClientHandler(ClientInfo c, Exception ex) {
                        //log("Client connection exception from " + c.nickname + ": " + ex.getMessage());
                    }
                };
                
                server.start();
                if (server.isStarted()) {
                    System.out.println("pippo");
                    txtLog.setText("");
                    log("Started server on port " + port + ".");
                    btnStop.setEnabled(true);
                    String mess[] = loginUtenti.getMsgs("server").split("~");
                    for(int i=0; i<mess.length; i++){
                        log(mess[i]);
                    }
                    server.run();
                    log("Stoped server on port " + port + ".");
                }
                btnStart.setEnabled(true);
                txtPort.setEnabled(true);
                btnStop.setEnabled(false);
                return null;
            }
        };
        starting.execute();
    }

    private void StopServer() {
        if (this.server != null && this.server.isStarted()) {
            this.server.stop();
        }
    }
}
