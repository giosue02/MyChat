package mychat.tcp.gui;

import java.awt.Color;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultCaret;
import javax.swing.text.Document;
import javax.swing.text.html.HTMLDocument;
import mychat.tcp.ClientInfo;
import mychat.tcp.client.MyChatClient;
import mychat.tcp.friends.Friends;
import static mychat.tcp.gui.MyChatServerGUI.registeredUserList;
import mychat.tcp.login.loginUtenti;

/**
 *
 * @author giosu
 */
public class MyChatClientGUI extends javax.swing.JFrame {

    private String nickname = "";

    protected MyChatClient client;
    private String online;

    /**
     * Creates new form MyChatClientGUI
     */
    public MyChatClientGUI(String name) {
        initComponents();
        nickname = name;
        txtNickname.setText(nickname);
        DefaultCaret caret = (DefaultCaret) txtLog.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        labelHost = new javax.swing.JLabel();
        labelNickname = new javax.swing.JLabel();
        txtHost = new javax.swing.JTextField();
        txtNickname = new javax.swing.JTextField();
        labelPort = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextPane();
        txtInput = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        connectUserList = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        friendsList = new javax.swing.JTextArea();
        btnFriends = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Client");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        labelHost.setText("Host");

        labelNickname.setText("Nickname");

        txtHost.setText("localhost");

        txtNickname.setText("nickname");
        txtNickname.setEditable(false);

        labelPort.setText("Port");

        txtPort.setText("6001");

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btnDisconnect.setText("Disconnect");
        btnDisconnect.setEnabled(false);
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNickname)
                    .addComponent(labelHost))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNickname, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(labelPort)
                .addGap(18, 18, 18)
                .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 304, Short.MAX_VALUE)
                .addComponent(btnConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDisconnect)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelHost)
                    .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPort)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect)
                    .addComponent(btnDisconnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNickname)
                    .addComponent(txtNickname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );

        txtLog.setEnabled(false);
        txtLog.setEditable(false);
        txtLog.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(txtLog);

        txtInput.setToolTipText("Scrivi qui...");
        txtInput.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtInput.setEnabled(false);

        btnSend.setText("Send");
        btnSend.setEnabled(false);
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        connectUserList.setColumns(20);
        connectUserList.setLineWrap(true);
        connectUserList.setRows(5);
        connectUserList.setText("Online users");
        connectUserList.setEnabled(false);
        connectUserList.setEnabled(false);
        connectUserList.setEditable(false);
        jScrollPane2.setViewportView(connectUserList);

        friendsList.setColumns(20);
        friendsList.setLineWrap(true);
        friendsList.setRows(5);
        friendsList.setText("Friends");
        friendsList.setEnabled(false);
        connectUserList.setEnabled(false);
        connectUserList.setEditable(false);
        jScrollPane4.setViewportView(friendsList);

        btnFriends.setText("Manage friends");
        btnFriends.setEnabled(false);
        btnFriends.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFriendsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtInput)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                    .addComponent(btnFriends, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInput)
                    .addComponent(btnSend)
                    .addComponent(btnFriends))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        this.connectClient();
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        this.sendMsg();
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        DisconnectedClient();
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        DisconnectedClient();
    }//GEN-LAST:event_formWindowClosed

    private void btnFriendsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFriendsActionPerformed
        new mychat.tcp.friends.friendsGUI(nickname).setVisible(true);
    }//GEN-LAST:event_btnFriendsActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyChatClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyChatClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyChatClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyChatClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyChatClientGUI(nickname).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnFriends;
    private javax.swing.JButton btnSend;
    private javax.swing.JTextArea connectUserList;
    public static javax.swing.JTextArea friendsList;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel labelHost;
    private javax.swing.JLabel labelNickname;
    private javax.swing.JLabel labelPort;
    private javax.swing.JTextField txtHost;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextPane txtLog;
    private javax.swing.JTextField txtNickname;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables

    private void connectClient() {
        int port = Integer.parseInt(this.txtPort.getText());
        String host = this.txtHost.getText();

        connectUserList.setEnabled(true);
        connectUserList.setEditable(false);
        txtLog.setEnabled(true);
        btnConnect.setEnabled(false);
        btnDisconnect.setEnabled(true);
        txtHost.setEnabled(false);
        txtPort.setEnabled(false);
        txtNickname.setEnabled(false);
        txtInput.setEnabled(true);
        btnSend.setEnabled(true);
        connectUserList.setEnabled(true);
        btnFriends.setEnabled(true);
        friendsList.setEnabled(true);
        
        String friend_list="Friends: \n";
        String username="";
        String id = loginUtenti.getId(txtNickname.getText());
        String friends[] = Friends.getFriends(id).split("~");
        for(int i=0; i<friends.length;i++){
        username = loginUtenti.getUsername(friends[i]);
        friend_list+="@"+username+"\n";
        }
        if(!username.equals("")){
            friendsList.setText(friend_list);
        }
                        
        SwingWorker starting = new SwingWorker() {
            @Override
            protected Object doInBackground() throws BadLocationException, IOException {
                try {
                    client = new MyChatClient(host, port, nickname) {

                        @Override
                        public void notifyUpdateClients(List<ClientInfo> users) {
                            online = "Online users: ";
                            for (ClientInfo c : users) {
                                online += "\n@" + c.nickname;
                            }
                            connectUserList.setText(online);
                        }

                        @Override
                        public void notifyReceivedMessage(ClientInfo user, String msg) {
                            String vett[];
                            String recipient_id = "";
                            String recipient_username = "";
                            String sender_id = "";
                            String sender_username = user.nickname;
                            boolean esiste = false;
                            vett = msg.split(" ");
                            if (vett[0].contains("@")) {
                                if (vett[0].charAt(0) == '@') {
                                    String string_recipient[] = vett[0].split("@");
                                    recipient_username = string_recipient[1];

                                    String registeredUsers = loginUtenti.RegisteredUsers();
                                    String users[] = registeredUsers.split("~");

                                    for (int i = 0; i < users.length; i++) {
                                        String utente[] = users[i].split("#");
                                        String id = utente[0];
                                        String username = utente[1];
                                        if (recipient_username.equals(username)) {
                                            esiste = true;
                                            recipient_id = id;
                                            recipient_username = username;
                                        }
                                        if(username.equals(sender_username)){
                                            sender_id = id;
                                        }
                                    }
                                    if (esiste == false) {
                                        try {
                                            log("User not found");
                                        } catch (BadLocationException ex) {
                                            Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                                        } catch (IOException ex) {
                                            Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    } else {
                                        if (nickname.equals(recipient_username)) {
                                            try {
                                                log("<span style='color:blue;'>"+sender_username + ": " + msg+"</span>");
                                            } catch (BadLocationException ex) {
                                                Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                                            } catch (IOException ex) {
                                                Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }else if(sender_username.equals(nickname)){
                                            loginUtenti.InsertMsg(sender_id, recipient_id, "<span style='color:blue;'>"+sender_username + ": "+ msg+"</span>");
                                            try {
                                                log("<span style='color:blue;'>"+sender_username+": " + msg+"</span>");
                                            } catch (BadLocationException ex) {
                                                Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                                            } catch (IOException ex) {
                                                Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }
                                    }
                                }
                            } else {
                                if (sender_username.equals(nickname)) {
                                    try {
                                        log(sender_username+": " + msg);
                                    } catch (BadLocationException ex) {
                                        Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException ex) {
                                        Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    loginUtenti.InsertMsg(null, null, sender_username + ": " + msg);
                                } else {
                                    try {
                                        log(sender_username + ": " + msg);
                                    } catch (BadLocationException ex) {
                                        Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException ex) {
                                        Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }
                        }

                        @Override
                        public void notifyException(Exception ex) {
                            //log("exception: " + ex.getMessage());
                        }
                    };
                    client.start();
                    txtLog.setText("");
                    log("Client connected");
                    String registeredUsers = loginUtenti.RegisteredUsers();
                    String users[] = registeredUsers.split("~");
                    String sender_username = nickname;
                    String sender_id = "";
                    for (int i = 0; i < users.length; i++) {
                        String utente[] = users[i].split("#");
                        String id = utente[0];
                        String username = utente[1];
                        if(username.equals(sender_username)){
                            sender_id = id;
                        }
                    }
                    if(!loginUtenti.getMsgs(sender_id).split("~").equals("")){
                        String mess[] = loginUtenti.getMsgs(sender_id).split("~");
                        for(int i=0; i<mess.length; i++){
                            log(mess[i]);
                        }
                    }
                    client.run();
                    log("Client disconnected");
                } catch (IOException ex) {
                    log("Errore: server non trovato");
                    Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    log("Client disconnected");
                    Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                btnConnect.setEnabled(true);
                btnDisconnect.setEnabled(false);
                txtHost.setEnabled(true);
                txtPort.setEnabled(true);
                txtNickname.setEnabled(true);
                txtInput.setEnabled(false);
                btnSend.setEnabled(false);
                txtInput.requestFocus();
                return null;
            }
        };
        starting.execute();
    }

    private void sendMsg() {
        String msg = this.txtInput.getText();
        this.txtInput.setText("");
        txtInput.setEnabled(false);
        btnSend.setEnabled(false);
        SwingWorker starting = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                client.sendMessage(msg);
                txtInput.setEnabled(true);
                txtInput.requestFocus();
                btnSend.setEnabled(true);
                return null;
            }
        };
        starting.execute();
    }

    public void log(String msg) throws BadLocationException, IOException {
        HTMLDocument log=(HTMLDocument) txtLog.getStyledDocument();
        log.insertAfterEnd(log.getCharacterElement(log.getLength()),msg + "<br>");
    }

    private void DisconnectedClient() {
        try {
            if (client != null) {
                client.closeConnection();
            }

        } catch (IOException ex) {
            Logger.getLogger(MyChatClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                      
}
